			Slip 3
1. A. Write a program to read five random numbers and convert it
to binary and octal using user defined functions.
B. Write a program to calculate average of all prime numbers
between n1 and n2 (take n1 and n2 from user).

A
//Write a program to read an integer from user and convert it 
//to binary and octal using user defined functions.
object NumberConv {
def binaryCon(n : Int) =
{
var i=0
var num=n
var A=new Array[Int](10)
while(num>0)
{
A(i)=num%2
i=i+1
num=num/2
}
println("\nbinary equivalent " )
for(j<-i-1 to 0 by -1)
print(A(j))
}
def octalCon(n:Int)=
{
var i=0
var num=n
var A=new Array[Int](10)
while(num>0)
{
A(i)=num%8
i=i+1
num=num/8
}
println("\n Octal equivalent " )
for(j<-i-1 to 0 by -1)
print(A(j))
}
def main(args: Array[String]) = 
{
  val rand = new scala.util.Random
var n=rand.nextInt(50)
println("%d".format(n))
octalCon(n)
binaryCon(n)
}//main
}//object


B
object prime
{
def main(args:Array[String])
{
var n1=0;
var n2=0;
var count=0;
var pcount=0;
var sum=0;
var prime=" ";
println("Enter two numbers:");
n1=scala.io.StdIn.readInt();
n2=scala.io.StdIn.readInt();
for(i<-n1 to n2)
{
count=0;
for(j<-1 to i )
{
if(i%j==0)
{
count=count+1;
}
}
if(count==2)
{
prime=prime+" "+i;
pcount=pcount+1;
sum=sum+i;
}
}
println("prime numbers:"+prime);
println("average:"+sum/pcount);
}
}

2. Model the following Import Export information as a graph model, and answer the following 
queries using Cypher. There are countries which import and export products to each other. 
Products are produced across different states in a country. Production of the products is 
measured in %. A product can be exported if its production exceeds 60%. A product needs to 
be imported if its consumption percentage is more than its production percentage in a 
country.

create (c:Country{name:"India"}) return c;
create (c:Country{name:"USA"}) return c;
create (c:Country{name:"Israil"}) return c;
create (c:Country{name:"Arab"}) return c;
create (c:Country{name:"Europe"}) return c;
create (s:States{name:"Maharashtra"}) return s;
create (s:States{name:"Punjab"}) return s;
create (s:States{name:"California"}) return s;
create (p:Product{name:"Wheat",production:"75%"}) return p;
create (p:Product{name:"Oil",production:"90%"}) return p;
create (p:Product{name:"Sugar",production:"50%"}) return p;
create (p:Product{name:"GroundNuts",production:"50%"}) return p;
create (p:Product{name:"Cotton",production:"50%"}) return p;
match (c:Country),(s:States),(p:Product) where c.name="India" and s.name="Maharashtra" 
and p.name="Wheat" create (c)-[:has_States]->(s)-[:Produces]->(p) return c,s,p;
match (c:Country),(s:States),(p:Product) where c.name="USA" and s.name="California" and
p.name="Oil" create (c)-[:has_States]->(s)-[:Produces]->(p) return c,s,p;
match (c:Country),(s:States),(p:Product) where c.name="India" and s.name="Maharashtra" 
and p.name="Oil" create (c)-[:has_States]->(s)-[:Produces]->(p) return c,s,p;
match (c:Country),(s:States),(p:Product) where c.name="India" and s.name="Maharashtra" 
and p.name="GroundNuts" create (c)-[:has_States]->(s)-[:Produces]->(p) return c,s,p;
match (c:Country),(s:States),(p:Product) where c.name="India" and s.name="Punjab" and
p.name="Sugar" create (c)-[:has_States]->(s)-[:Produces]->(p) return c,s,p;


1.
match (c:Country),(p:Product),(s:States) where p.name="Oil" and (c)-[:has_States]->(s)-[:Produces]->(p) return c.name;

2.
match (s:States),(p:Product) where s.name="Maharashtra" and (s)-[:Produces]->(p) return p.name;

3.
match (c:Country),(p:Product),(s:States) where p.production>="50%" and p.name="Sugar" and (c)-[:has_States]->(s)-[:Produces]->(p) return c.name;

4.
